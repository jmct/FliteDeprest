let tfst (a, _, _) = a
let tsnd (_, a, _) = a
let tthd (_, _, a) = a
:m Flite.Parse Flite.Syntax Flite.Projections Flite.TypeChecker2 Flite.Defunct2 Flite.Pretty Flite.Flic Flite.Projections.Contexts Data.List Data.Generics.Uniplate.Operations Data.Map Flite.Projections Flite.LambdaLift Flite.Dependency Flite.Projections.NiceType Data.Maybe GHC.Exts Flite.AutoPar Flite.Writer Data.Set Flite.ContextStrat Flite.Fresh

parsed <- parseProgFile "examples_types/SumEuler.hs"
let (p, ds, ts) = convertProg parsed

let myK = CMu "" (CSum [("Cons",CProd [CLaz (CMu "" (CSum [("Cons",CProd [CStr CBot,CStr (CRec "")]),("Nil",CBot)])),CStr (CRec "")]),("Nil",CProd [])])

let o = mediumOracle
let prog = lintEqs p
let (pAnal, prots, tMap) = projAnalysis (prog, ds, ts)
let s2 = gatherProg (prots, tMap) pAnal prog
let dGroups = demandGroups s2
let (callEnv, renames) = unzip $ fmap demSpec dGroups
let funDems = concatMap (flattenDems dGroups) callEnv
let getK n               = fromJust $ Prelude.lookup n funDems
let spec n e             = fst $ specCalls callEnv (prots, tMap) pAnal (getK n) e
let prog'                = [Func n as (spec n e) | Func n as e <- cloneFuncsD prog callEnv]
let parIt n e            = fst . snd $ runFresh (placePar (concat renames, o) (prots, tMap) pAnal (getK n) e) "P" 0
let parred               = [Func n as (parIt n e) | Func n as e <- prog']
let lambed               = lambdaLift '_' $ remFreeze parred
let fliced               = flic lambed
