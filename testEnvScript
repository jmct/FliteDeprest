let tfst (a, _, _) = a
let tsnd (_, a, _) = a
let tthd (_, _, a) = a
:m Flite.Parse Flite.Syntax Flite.Projections Flite.TypeChecker2 Flite.Defunct2 Flite.Pretty Flite.Flic Flite.Projections.Contexts Data.List Data.Generics.Uniplate.Operations Data.Map Flite.Projections Flite.LambdaLift Flite.Dependency Flite.Projections.NiceType Data.Maybe GHC.Exts
parsed <- parseProgFile "examples_types/Countdown.hs"
let converted = convertProg parsed
let dTypes = tsnd converted
let prots = prototypes dTypes
let listps = allPrinContexts $ fromPTExp $ pDataRhs $ dTypes !! 4
let getC (CMu n c) = c
let y1 = CVar "y1"
let y1 = CVar "y1"
let y2 = CVar "y2"
let top = y1 :+: y1 :&: y2 :+: y2

-- Contexts on Bools
let boolps = allPrinContexts $ fromPTExp $ pDataRhs $ dTypes !! 2
let boolT = boolps !! 2
let boolF = boolps !! 1
let boolTop = boolps !! 0
let boolBot = boolps !! 3

-- Contexts on lists
let ht = last listps
let ph = listps !! 3
let pl = listps !! 1
let h = listps !! 2
let t = listps !! 4
let l = listps !! 0
let b = listps !! 5

-- Context on Shrubs
let shrubCont = cDataCont (prots !! 6)
let ufs = unfold shrubCont
let uFs = CSum [("Root",CProd [CStr (CMu "Shrub_uf" (CSum [("Void",CProd []),("Fork",CProd [CStr (CSum [("Root",CProd [CStr (CRec "unfolded")])]),CStr CBot,CLaz (CSum [("Root",CProd [CLaz (CRec "unfolded")])])])]))])]

-- Below if for testing the conjunction of lists...
-- I'm still not sure if removing the 'norm' from lubBHR is
-- correct
let b1 = getC b
let h1 = getC h
let br = subRec (CTVar "a" (y1)) b1
let hr = subRec (CTVar "a" (y2)) h1
let bhr = br & hr
let lubBHR = lubA "a" bhr

-- Below stuff for testing Context Transformers and Environments
let myValEnv1 = Data.Map.fromList [("a", CStr (CVar "y"))]
let myValEnv2 = Data.Map.fromList [("w", CLaz b), ("y", CLaz b), ("a", CLaz CBot)]
let myValEnv3 = Data.Map.fromList [("w", CStr b), ("y", CStr b)]

-- example CEnv (for Lazify.hs)
let myCEnv = Data.Map.fromList [("append", CProd [CStr b, CStr b]),("map^(+)", CProd [CStr b])]



let recs = isSelfRec $ callGraph $ tfst converted
let ts = mapRange (retNiceType . toNiceType) $ tthd converted
let tMap = Data.Map.fromList ts
let makeTup f@(Func n _ _) = let (Just lookR) = Prelude.lookup n recs in (f, lookR)
let callGs = (fmap . fmap) makeTup (callGroups $ tfst converted)

let i1 = analyseCallGroup prots tMap Data.Map.empty (callGs !! 0)
let i2 = analyseCallGroup prots tMap i1 (callGs !! 1)
let i3 = analyseCallGroup prots tMap i2 (callGs !! 2)
let i4 = analyseCallGroup prots tMap i3 (callGs !! 3)
let i5 = analyseCallGroup prots tMap i4 (callGs !! 4)
let i6 = analyseCallGroup prots tMap i5 (callGs !! 5)
let i7 = analyseCallGroup prots tMap i6 (callGs !! 6)
let i8 = analyseCallGroup prots tMap i7 (callGs !! 7)
let i9 = analyseCallGroup prots tMap i8 (callGs !! 8)
let i10 = analyseCallGroup prots tMap i9 (callGs !! 9)
let i11 = analyseCallGroup prots tMap i10 (callGs !! 10)
let i12 = analyseCallGroup prots tMap i11 (callGs !! 11)
let i13 = analyseCallGroup prots tMap i12 (callGs !! 12)
let i14 = analyseCallGroup prots tMap i13 (callGs !! 13)
let i15 = analyseCallGroup prots tMap i14 (callGs !! 14)
let i16 = analyseCallGroup prots tMap i15 (callGs !! 15)
let i17 = analyseCallGroup prots tMap i16 (callGs !! 16)
let i18 = analyseCallGroup prots tMap i17 (callGs !! 17)
let i19 = analyseCallGroup prots tMap i18 (callGs !! 18)
let i20 = analyseCallGroup prots tMap i19 (callGs !! 19)
let i21 = analyseCallGroup prots tMap i20 (callGs !! 20)
let i22 = analyseCallGroup prots tMap i21 (callGs !! 21)
let i23 = analyseCallGroup prots tMap i22 (callGs !! 22)
let i24 = analyseCallGroup prots tMap i23 (callGs !! 23)
let i25 = analyseCallGroup prots tMap i24 (callGs !! 24)

let retType = snd $ fromJust (Data.Map.lookup "split" tMap)
let allPConts = pConts prots retType
let myF = fst $ head $ callGs !! 14
let argTypes = fst $ fromJust $ Data.Map.lookup "split" tMap
let myDefCT = botDef prots myF argTypes
let testRun = analyseFunc (myF, tMap) (prots, (myDefCT, tMap)) i14 (allPConts !! 0)
let myCompEnv = (prots, (myDefCT, tMap))
let myK = allPConts !! 0
let myFRHS = funcRhs myF
let (Case e alts) = myFRHS
let nilAlt = head alts
let conAlt = alts !! 1
let (App (Con "Cons") as) = fst conAlt
let (CProd cs) = mkAbs $ prot (fst myCompEnv) "Cons"
let conAltRhs  = snd conAlt
let p = approxS myCompEnv i3 myK conAltRhs
let prod = CProd $ zipWith fromMaybe cs (fmap (lookupVar p) as)
